//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "../BancorContinuousToken.sol";

/** Two Bonding Curves: Mint Curve and Burn Curve
    Mint Price = _m2r * Burn Price */

abstract contract ScalarRBCT is Context, Ownable, BancorContinuousToken{
  // Continuous Organization is set as the Owner.
  // Revnues are given to the Owner.
  using SafeMath for uint256;

  uint32 private immutable _m2r; // Mint and Retire Ratio in ppm
  uint32 private constant MAX_WEIGHT = 1000000;

  constructor(
    uint32 cw_,
    uint32 m2r_,
    address formula_
  ) BancorContinuousToken(cw_, formula_)
  {
    _m2r = m2r_;
  }

  function init(string memory name_, string memory symbol_) public virtual payable {
    super.init(name_, symbol_);
  }

  function price() public view virtual override initialized returns (uint256) {
    return BancorContinuousToken.price().mul(MAX_WEIGHT/_m2r);
  }

  function mint(uint256 amount) public payable virtual override {
    uint256 amount = BancorFormula(_formula).purchaseTargetAmount(
      totalSupply(),
      reserveBalance(),
      reserveWeight(),
      deposit
    );
    IERC20Restricted(token()).mint(_msgSender(), amount);
    // Add `try / catch` statement for smoother error handling
    TransferHelper.safeTransferFrom(r_token, _msgSender(), address(this), deposit);
    emit Mint(_msgSender(), amount);
  }

  function mint() external payable virtual override {
    _token.mint(
      _msgSender(),
      BancorContinuousToken.purchaseTargetAmount(msg.value.div(_m2r))
    );
    (bool sent, ) = payable(owner()).call{
      value: (msg.value).mul(_m2r/MAX_WEIGHT) - 1
    }("");
    require(sent, "Failed ETH transfer");
  }

  // Cost of purchasing "amount" of cont. tokens
  function purchaseCost(uint256 amount) public view virtual override initialized returns (uint256) {
    return _formula.purchaseCost(
      totalSupply(),
      address(this).balance,
      reserveWeight(),
      amount
    ).mul(_m2r);
  }

  // Cont. token gains from depositing "amount" of reserve tokens
  function purchaseTargetAmount(uint256 amount) public view virtual override initialized returns (uint256) {
    return _formula.purchaseTargetAmount(
      totalSupply(),
      address(this).balance,
      reserveWeight(),
      amount/_m2r
    ).mul(_m2r);
  }
}